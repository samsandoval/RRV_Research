# Code to run the RRV study
# Sam Sandoval 09/12/2018
#
# ______________ Section 1 : Basic Information ____________________________
##_______________        1.1 Defining constants
library(plyr)
rm(list = ls())
timesteps = 20
Num_of_traces = 3
Reliability_Target <- 0.7
Initial_Year_Def_NoDef = 0 # If the initial year starts with No Deficit then, Initial_seed = 0, Otherwise Initial_seed = 1 

##_______________        1.2 Miscellaneous
Num_of_TimeSteps = timesteps + 1
set.seed(150)
dat = runif(Num_of_TimeSteps*Num_of_traces, 0, 1)
# ______________ End of Section 1 _________________________________________


# ______________ Section 2: Performance Criteria __________________________
##_______________        2.1 Estimating the Deficit - No Deficit Matrix
# This line is generating n number of random numbers
Matrix_Def_NoDef <- matrix (data = dat, nrow = Num_of_TimeSteps, ncol = Num_of_traces)
colnames(Matrix_Def_NoDef) <- paste("Trace", 1:Num_of_traces)
# Deficit = 1, No Deficit = 0
Matrix_Def_NoDef <- ifelse(Matrix_Def_NoDef <= Reliability_Target, 0, 1)
Matrix_Def_NoDef[1,] <- Initial_Year_Def_NoDef
Matrix_Total_Def <- matrix(data = colSums(Matrix_Def_NoDef !=0))
colnames(Matrix_Total_Def) <- c("Number of Deficits")


##_______________        2.2 Reliability Matrix
Matrix_Reliability = matrix(data = NA, nrow = Num_of_traces, ncol = 1)
Matrix_Reliability = ((timesteps - Matrix_Total_Def)/timesteps)
colnames(Matrix_Reliability) <- c("Reliability")
#Matrix_Resil_Count <- matrix(data = NA, nrow = Num_of_TimeSteps, ncol = Num_of_traces)


##_______________        2.3 Resilience Matrix



#for (j in 1:3) {
#      Matrix_Reliability[j,1] = (timesteps - Matrix_Total_Def[j,1])/timesteps
#  }

#for(j in 1:k){
#  for(i in 1:n){
#    x[i,j] = rnorm(1, mu, sigma)
#  }
#}


---
title: "RRV_Test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Section 1 : Basic Information
## 1.1 Constants
```{r}
library(plyr)
rm(list = ls())
timesteps = 20
Num_of_traces = 3
Reliability_Target <- 0.7
Initial_Year_Def_NoDef = 0 # If the initial year starts with No Deficit then, Initial_seed = 0, Otherwise Initial_seed = 1 
timesteps
Num_of_traces
Reliability_Target
```

## 1.1 Miscellaneous
```{r}
Num_of_TimeSteps = timesteps + 1
set.seed(150)
dat = runif(Num_of_TimeSteps*Num_of_traces, 0, 1)
dat

```


# Section 2 : Estimation of Performance Criteria
## 2.1 Matrix of Deficits and No Deficits
```{r}
# This line is generating n number of random numbers
Matrix_Def_NoDef <- matrix (data = dat, nrow = Num_of_TimeSteps, ncol = Num_of_traces)
colnames(Matrix_Def_NoDef) <- paste("Trace", 1:Num_of_traces)
# Deficit = 1, No Deficit = 0
Matrix_Def_NoDef <- ifelse(Matrix_Def_NoDef <= Reliability_Target, 0, 1)
Matrix_Def_NoDef[1,] <- Initial_Year_Def_NoDef
Matrix_Total_Def <- matrix(data = colSums(Matrix_Def_NoDef !=0))
colnames(Matrix_Total_Def) <- c("Number of Deficits")
Matrix_Def_NoDef

```

## 2.1 Matrix of Reliabilities
```{r}
Matrix_Reliability = matrix(data = NA, nrow = Num_of_traces, ncol = 1)
Matrix_Reliability = ((timesteps - Matrix_Total_Def)/timesteps)
colnames(Matrix_Reliability) <- c("Reliability")
Matrix_Total_Def
Matrix_Reliability
```

## 2.1 Matrix of Resilience
```{r}
Matrix_Count_Resilience = matrix(data = NA, nrow = timesteps, ncol = Num_of_traces)
for(i in 1:timesteps)
  {Matrix_Count_Resilience[1,i] <- ifelse(Matrix_Def_NoDef[1,i]==1, 1, 0)  }
Matrix_Def_NoDef
Matrix_Resilience
```





